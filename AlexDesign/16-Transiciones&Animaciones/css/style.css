*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}


/* Propiedad Transform permite agregar transformaciones en CSS que permiten escalar, rotar, sesgar y trasladar un elemento con distintos metodos:

        translate -> Permite trasladar a un elemento por medio de coordenas X y Y (se evita usar position: relative y las propiedades offset (top, right, left, bottom) 
        Cuando usar transform en vez de position y sus propiedades offset? -> CUANDO USAMOS ANIMACIONES y TRANSICIONES.
            transform: translate(100px) = {position: relative; left: 100px;}
        
        rotate -> Permite rotar un elemento usando valores angulares: 
            deg -> grados de 0 a 360
            grad -> gradiales de 0 a 400
            rad -> radiales de 0 a 6.28319
            turn -> vueltas de 0 a 1 

        scale -> Permite escalar, es decir aumentar o decrementar el valor de un elemento, aceptando valores positivos, negativos y decimales. El valor por defecto es 1

        skew -> Permite sesgar un elemento, solo acepta valores angulares (grados "deg", gradiales "grad", radiales "rad" y vueltas "turn")
*/

/* Transiciones -> es un paso o cambio de un estado a otro. En CSS son las primeras formas de animar a un elemento y permiten animar cambios de un estado a otro haciendo que pase de una manera NO instantanea, creando una animacion. 

Las transiciones requieren un disparidad, como ser las pseudoclases (hover, active, checked, target, focus)*/

body{
    font-family: 'Arial';
}

.container{
    border: 1px solid;
}

.element{
    background-color: coral;
    width: 200px;
    height: 200px;
    margin: 60px;

    /* transform: translate(100px, 100px);
    Es el shorthand de translate X y Y

    transform: translateX(100px);
    Valor positivo lo mueve a la derecha, valor negativo lo mueve a la izquierda

    transform: translateY(100px);
    Valor positivo lo mueve hacia abajo, valor negativo lo mueve hacia arriba

    transform: translateX(100px) translateY(100px); */

    transition-property: background-color, transform, opacity;
    transition-duration: 300ms;
    transition-timing-function: linear;
    transition-delay: 1s;
    
    /* Shorthand: */
    transition: .3s background-color, transform linear 1s;
    /* Siempre el primer valor de tiempo sera para duracion */
}

/* Cuando el mouse pase sobre el elemento: */

.element:hover{

    transform: rotate(90deg);

    /* transform: scale(1.5, 2); */
    /* Shorthand de scaleX y scaleY */
    /* transform: scaleX(1.5) scaleY(2); */
    /* Incrementa su tamanho 1.5 es decir si mide 200px lo multiplica: 200*1.5 = 300px. y 200*2 = 400px */

    /* transform: scaleY(.7); */
    /* Disminuye su tamanho .7 es decir si mide 200px lo divide entre 10 y lo multiplica por el valor que se le da: 200/10 * .7 */

    /* transform-origin: left top; */
    /* Para que scaleX empiece desde la izquierda simulando un aumento de width y que scaleY empiece en top simulando un aumento de height */

    /* transform: skew(); */
    /* La MDN comenta que esta forma shothand YA NO se deberia usar, si no de forma individual. */

    /* transform: skewX(70deg); */
}

/* Cuando el mouse pase sobre el contenedor, el elemento tendra las transformaciones: */

.container:hover .element{
    background-color: blue;
    transform: translate(100%, 100%) scale(1.3) rotate(80deg);
}